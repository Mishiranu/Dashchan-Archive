buildscript {
	repositories {
		jcenter()
		google()
    }

	dependencies {
		classpath 'com.android.tools.build:gradle:3.6.4'
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
		classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
	}
}

allprojects {
	repositories {
		jcenter()
		google()
	}
}

apply plugin: 'com.android.library'

def Properties privateProperties = new Properties()

if (new File('private.properties').exists()) {
	privateProperties.load(new FileInputStream(file('private.properties')))
}

android {
	compileSdkVersion 29
	buildToolsVersion '29.0.3'

	sourceSets.main {
		manifest.srcFile 'AndroidManifest.xml'
		java.srcDirs = ['src']
		resources.srcDirs = ['src']
		aidl.srcDirs = ['src']
		renderscript.srcDirs = ['src']
		res.srcDirs = ['res']
		assets.srcDirs = ['assets']
	}

	buildTypes {
		release {
			minifyEnabled false
		}
	}

	variantFilter { variant ->
		if (variant.buildType.name != com.android.builder.core.BuilderConstants.RELEASE) {
			variant.ignore = true
		}
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_7
		targetCompatibility JavaVersion.VERSION_1_7
	}
}

android.libraryVariants.all { variant ->
	def task = project.tasks.create 'jar', Jar
	task.dependsOn variant.javaCompile
	task.from variant.javaCompile.destinationDir
	task.exclude '**/BuildConfig.class'
	task.exclude '**/R.class'
	task.exclude '**/R$*.class'
	artifacts.add('archives', task)
}

task javadocDoclavaCleanup(type: Delete) {
	delete 'build/docs/javadoc/assets'
}

task javadocDoclavaCopyAssets(type: Copy) {
	from 'doclava-assets'
	into 'build/docs/javadoc'
}

task javadocGenerate(type: Javadoc) {
	source = android.sourceSets.main.java.srcDirs
	classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

	if (new File('doclava.jar').exists()) {
		options.doclet = 'com.google.doclava.Doclava'
		options.docletpath = [file('doclava.jar')]
		options.addStringOption('title', 'Dashchan API Reference')
		title = null
		finalizedBy javadocDoclavaCleanup
		finalizedBy javadocDoclavaCopyAssets
	}
}

task javadocJar(type: Jar, dependsOn: javadocGenerate) {
	from javadocGenerate.destinationDir
	classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
	from android.sourceSets.main.java.srcDirs
	classifier = 'sources'
}

artifacts {
	archives javadocJar
	archives sourcesJar
}

def bintrayUser = privateProperties.getProperty('bintray.user')
def bintrayApiKey = privateProperties.getProperty('bintray.apikey')

if (bintrayUser != null && bintrayApiKey != null) {
	def publishedGroupId = 'com.github.mishiranu'
	def libraryVersion = '1.7'

	def libraryDescription = 'Dashchan public API.\nUse "compileOnly" ' +
			'instead of "implementation" to add this library!'
	def gitUrl = 'https://github.com/Mishiranu/DashchanLibrary'

	def developerId = 'mishiranu'
	def developerName = 'Fukurou Mishiranu'
	def developerEmail = 'fukurou.mishiranu@gmail.com'

	def licenseName = 'The Apache Software License, Version 2.0'
	def licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
	def allLicenses = ['Apache-2.0']

	apply plugin: 'com.jfrog.bintray'

	version = libraryVersion

	bintray {
		user = bintrayUser
		key = bintrayApiKey

		configurations = ['archives']
		pkg {
			repo = publishedGroupId
			name = rootProject.name
			desc = libraryDescription
			vcsUrl = gitUrl
			licenses = allLicenses
			publish = true
			publicDownloadNumbers = true
			version.desc = libraryDescription
		}
	}

	task retainJarArtifacts(type: RetainJarArtifacts)

	bintrayUpload.dependsOn retainJarArtifacts

	apply plugin: 'com.github.dcendents.android-maven'

	group = publishedGroupId

	install.repositories.mavenInstaller.pom.project {
		packaging 'jar'
		groupId publishedGroupId
		artifactId rootProject.name

		name rootProject.name
		description libraryDescription

		licenses {
			license {
				name licenseName
				url licenseUrl
			}
		}

		developers {
			developer {
				id developerId
				name developerName
				email developerEmail
			}
		}

		scm {
			connection gitUrl
			developerConnection gitUrl
		}
	}
}

class RetainJarArtifacts extends DefaultTask {
	@TaskAction
	def action() {
		def artifacts = project.configurations.archives.artifacts;
		artifacts.retainAll artifacts.findAll {
			it.type == 'jar'
		}
	}
}
